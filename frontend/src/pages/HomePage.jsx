import { UserButton } from '@clerk/clerk-react'
import React, { useState, useEffect } from 'react'
import {useSearchParams} from 'react-router';
import { useStreamChat } from '../hooks/useStreamChat';

import PageLoader from '../components/PageLoader';
import "../styles/stream-chat-theme.css"
import {Chat, Channel, ChannelList, MessageList, MessageInput, Thread, Window} from 'stream-chat-react'
import { List, PlusIcon } from 'lucide-react';
import CreateChannelModal from '../components/CreateChannelModal';
import { HashIcon,UsersIcon } from 'lucide-react';
import CustomChannelPreview from '../components/CustomChannelPreview';
import UsersList from '../components/UsersList';


const HomePage = () => {
  // this state will help us show users a modal, when they click the create channel button.
  const [isCreateModalOpen, setisCreateModalOpen] = useState(false)

  // which channel shows in the chat section, or which channel is active, also we want something like when the user refreshes the page, we want that same channel to be active, so we'll add that channelId in the url when user first time clicked on it
  // so basically we'll be using searchParams here.
  const [activeChannel, setActiveChannel] = useState(null)

  const [searchParams, setSearchParams] = useSearchParams();//this is just like useState.

  const {chatClient, error, tokenLoading}=useStreamChat();

  //set the active channel from the url params when the page reloads
  useEffect(() => {
    

    if(chatClient){
      const channelId = searchParams.get("channel")//channel will act as a key and the value will be provided in the params to this key.
      if(channelId){
        // messaging is a stream channel type, you can see it on stream dashboard channel types.
        const channel = chatClient.channel("messaging",channelId)
        setActiveChannel(channel);
      }
    }
    
    
    
  }, [chatClient, searchParams])//run this when the chatClient or searchParams update.
  useEffect(() => {
  if (!chatClient) return;

  (async () => {
    const channels = await chatClient.queryChannels({
      type: "messaging",
      members: { $in: [chatClient.user.id] },
    });
    console.log("Manually queried channels:", channels.map(c => c.id));
  })();
}, [chatClient]);

  
  if(error){
      // handle this with a better component.
      return <p>Something went wrong...</p>
    }

  if(tokenLoading || !chatClient){
    return <PageLoader />
  }
  return (
    // the styles we're using, stream-chat-theme.css, 90% was generated by ai, and 10% were some bugs or customization that we could fix
    <div className="chat-wrapper">
      <Chat client={chatClient}>
        <div className="chat-container">
          {/* LEFT SIDEBAR */}
          <div className="str-chat__channel-list">
            <div className="team-channel-list">
              {/* Header */}
              <div className="team-channel-list__header gap-4">
                <div className="brand-container">
                  <img src="/logo.png" alt="Logo" className='brand-logo'/>
                  <span className='brand-name'>Slap</span>
                </div>
                <div className="user-button-wrapper">
                  <UserButton />
                </div>
              </div>
              {/* Channels list, oh and btw the classnames, that's bem convention */}
              <div className="team-channel-list__content">
                <div className="create-channel-section">
                  <button onClick={()=>setisCreateModalOpen(true)} className='create-channel-btn'>
                    <PlusIcon className='size-4'/>
                    <span>Create Channel</span>
                  </button>
                </div>
                {/* Channel list component, this component displays all the channels that the user is a part of. and after this we'll complete the direct messages part as well.*/}
                
               
                
                
                               <ChannelList
  filters={{
    type: "messaging",
    members: { $in: [chatClient.user.id] },
  }}
  options={{ state: true, watch: true }}
  Preview={(previewProps) => (
    <CustomChannelPreview
      channel={previewProps.channel}
      activeChannel={activeChannel}
      setActiveChannel={(channel) =>
        setSearchParams({ channel: channel.id })
      }
    />
  )}
  List={({ children, loading, error }) => (
                    <div className="channel-sections">
                      <div className="section-header">
                        <div className="section-title">
                          <HashIcon className="size-4" />
                          <span>Channels</span>
                        </div>
                      </div>

                      {/* todos: add better components here instead of just a simple text  */}
                      {loading && <div className="loading-message">Loading channels...</div>}
                      {error && <div className="error-message">Error loading channels</div>}

                      <div className="channels-list">{children}</div>

                      <div className="section-header direct-messages">
                        <div className="section-title">
                          <UsersIcon className="size-4" />
                          <span>Direct Messages</span>
                        </div>
                      </div>
                      <UsersList activeChannel={activeChannel} />
                    </div>
                  )}
                />


                  


                
              </div>
            </div>
          </div>
          {/* RIGHT SIDEBAR */}
          <div className="chat-main">
            <Channel channel={activeChannel}>
              <Window>
                {/* <CustomChannelHeader /> */}
                <MessageList />
                <MessageInput />
              </Window>

              <Thread />
            </Channel>
          </div>
        </div>
        {isCreateModalOpen && (//if createModal is open then render this component below.
          <CreateChannelModal onClose={()=> setisCreateModalOpen(false)}/>
        )}
      </Chat>
    </div>
  )
}

export default HomePage